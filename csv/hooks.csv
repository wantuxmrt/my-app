|-----------------|--------------------------|----------------------------------------|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|
| Hook            | Path                     | Description                            | Parameters                               | Return Value                                                                                                                                                    | Dependencies                 |
|-----------------|--------------------------|----------------------------------------|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|
| useAuth         | hooks/useAuth.ts         | Управление состоянием аутентификации   |                                          | { user: User | null; login: (email: string, password: string) => Promise<void>; logout: () => void; register: (userData: UserRegistration) => Promise<void> }   | AuthContext, localStorage    |
|-----------------|--------------------------|----------------------------------------|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|
| useFilters      | hooks/useFilters.ts      | Управление фильтрацией данных          | initialFilters: Record<string, any>      | { filters: Record<string, any>; updateFilter: (key: string, value: any) => void; resetFilters: () => void }                                                     | useState, useEffect          |
|-----------------|--------------------------|----------------------------------------|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|
| useLocalStorage | hooks/useLocalStorage.ts | Синхронизация состояния с localStorage | key: string, initialValue: T             | [storedValue: T, setValue: (value: T | ((val: T) => T)) => void]                                                                                                | useState, useEffect          |
|-----------------|--------------------------|----------------------------------------|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|
| useMediaQuery   | hooks/useMediaQuery.ts   | Определение медиа-запросов             | query: string                            | boolean                                                                                                                                                         | window.matchMedia, useEffect |
|-----------------|--------------------------|----------------------------------------|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|
| usePagination   | hooks/usePagination.ts   | Управление пагинацией данных           | totalItems: number, itemsPerPage: number | { currentPage: number; totalPages: number; nextPage: () => void; prevPage: () => void; goToPage: (page: number) => void; startIndex: number; endIndex: number } | useState, useCallback        |
|-----------------|--------------------------|----------------------------------------|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|
